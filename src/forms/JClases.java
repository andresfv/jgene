/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import clases.Campo;
import clases.CamposTableModel;
import clases.Conexion;
import com.sun.security.auth.login.ConfigFile;
import exceptions.ExceptionConnection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import oracle.jdbc.OraclePreparedStatement;
import connection.Connector;

import java.awt.CheckboxMenuItem;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.JTree.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.*;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import oracle.sql.DATE;
import org.xml.sax.SAXException;
import utils.ConfConexion;
import utils.Utilitarios;

/**
 *
 * @author Universidad Nacional
 */
public class JClases extends javax.swing.JFrame {

    private String directorio;
    ArrayList<Campo> listaCampos = new ArrayList<Campo>();
    private String nombreTabla;
    private String nombreEntidad;
    private Conexion conexionActiva;
    ArrayList<Conexion> listaConex = new ArrayList<>();
    StringBuilder i18n = new StringBuilder();
    
    

    public JClases() throws ExceptionConnection {
        initComponents();
        txtEntidad.setEnabled(false);
        txtTitulo.setEnabled(false);
        btnGenerar.setEnabled(false);
        btnNuevoCampo.setEnabled(false);
        Conexion conexionActiva = new Conexion();
        try {
            buscaConexiones();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(JClases.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(JClases.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        cboRelacion = new javax.swing.JComboBox();
        cboTipoAtributo = new javax.swing.JComboBox();
        jFileChooser1 = new javax.swing.JFileChooser();
        jOptionPane1 = new javax.swing.JOptionPane();
        cboTipoComponente = new javax.swing.JComboBox();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        txtTabla = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnBuscar = new javax.swing.JToggleButton();
        txtEntidad = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnGenerar = new javax.swing.JToggleButton();
        txtURLConexion = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtRuta = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnFileChoose = new javax.swing.JButton();
        txtUsuario = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtContraseña = new javax.swing.JPasswordField();
        btnNuevoCampo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlListaConexiones = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        txtNomConexion = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        txtPaquete = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        chkDomain = new javax.swing.JCheckBox();
        chkRepository = new javax.swing.JCheckBox();
        chkService = new javax.swing.JCheckBox();
        chkEditForm = new javax.swing.JCheckBox();
        chkListForm = new javax.swing.JCheckBox();
        chkBean = new javax.swing.JCheckBox();
        chkLovBean = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        rbCrud = new javax.swing.JRadioButton();
        rbAser = new javax.swing.JRadioButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        chkScripts = new javax.swing.JCheckBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTable3);

        cboRelacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N/A", "@OneToOne", "@OneToMany", "@ManyToOne", "@ManyToOne(Mestro)", "@Transient" }));

        cboTipoAtributo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "String", "int", "Date", "double", "float", " " }));

        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        jFileChooser1.setToolTipText("");

        cboTipoComponente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N/A", "p:inputText", "sdkuna:inputTextArea", "components:inputTextArea", "p:spinner", "p:selectBooleanCheckbox", "p:selectOneMenu", "p:autoComplete", "p:calendar", "components:detailNoEditTableHorizontal", "p:editor", " " }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtTabla.setToolTipText("");

        jLabel1.setText("Titulo");

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-search.png"))); // NOI18N
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        txtEntidad.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtEntidad.setToolTipText("");

        jLabel2.setText("Nombre de la Entidad:");

        btnGenerar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-process.png"))); // NOI18N
        btnGenerar.setText("Generar");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        jLabel4.setText("Directorio");

        txtRuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRutaActionPerformed(evt);
            }
        });

        jLabel5.setText("URL");

        btnFileChoose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-folder.png"))); // NOI18N
        btnFileChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileChooseActionPerformed(evt);
            }
        });

        txtUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsuarioActionPerformed(evt);
            }
        });

        jLabel6.setText("Usuario");

        jLabel7.setText("Contraseña");

        btnNuevoCampo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-plus.png"))); // NOI18N
        btnNuevoCampo.setToolTipText("Insertar Campo");
        btnNuevoCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoCampoActionPerformed(evt);
            }
        });

        jlListaConexiones.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlListaConexiones.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlListaConexionesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlListaConexiones);

        jLabel8.setText("Nombre");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-document.png"))); // NOI18N
        jButton1.setMaximumSize(new java.awt.Dimension(61, 29));
        jButton1.setMinimumSize(new java.awt.Dimension(61, 29));
        jButton1.setName("btnNuevaConexion"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaConexion(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-trash.png"))); // NOI18N
        jButton2.setName("btnEliminarConexion"); // NOI18N

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ui-save.png"))); // NOI18N
        jButton3.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton3.setRolloverEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        txtPaquete.setText("cr.ac.una.cgi.sigesa.pbs.abs");
        txtPaquete.setToolTipText("");

        jLabel9.setText("Paquete");

        chkDomain.setSelected(true);
        chkDomain.setText("Domain");
        chkDomain.setName("chkDomain"); // NOI18N

        chkRepository.setSelected(true);
        chkRepository.setText("Repository");

        chkService.setSelected(true);
        chkService.setText("Service");

        chkEditForm.setSelected(true);
        chkEditForm.setText("EditForm");

        chkListForm.setSelected(true);
        chkListForm.setText("ListForm");

        chkBean.setSelected(true);
        chkBean.setText("Bean");

        chkLovBean.setSelected(true);
        chkLovBean.setText("LOVBean");

        jLabel10.setText("Archivos a generar:");

        buttonGroup2.add(rbCrud);
        rbCrud.setSelected(true);
        rbCrud.setText("CRUD");
        rbCrud.setName(""); // NOI18N

        buttonGroup2.add(rbAser);
        rbAser.setText("ASER");

        jLabel12.setText("Tabla a generar:");

        chkScripts.setSelected(true);
        chkScripts.setText("Scripts SQL");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Campo", "Tipo", "Tamaño", "Atributo", "Tipo Atributo", "Relación", "componente", "Etiqueta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.setToolTipText("");
        jTable4.setColumnSelectionAllowed(true);
        jTable4.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jTable4);
        jTable4.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setResizable(false);
            jTable4.getColumnModel().getColumn(0).setPreferredWidth(5);
            jTable4.getColumnModel().getColumn(2).setPreferredWidth(30);
            jTable4.getColumnModel().getColumn(5).setPreferredWidth(30);
            jTable4.getColumnModel().getColumn(6).setPreferredWidth(110);
            jTable4.getColumnModel().getColumn(6).setCellEditor(new javax.swing.DefaultCellEditor(cboRelacion));
            jTable4.getColumnModel().getColumn(7).setCellEditor(new javax.swing.DefaultCellEditor(cboTipoComponente));
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(43, 43, 43)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addGap(34, 34, 34)
                                                .addComponent(txtContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel5)
                                                    .addComponent(jLabel6)
                                                    .addComponent(jLabel8))
                                                .addGap(58, 58, 58)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(txtNomConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtURLConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel9))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnFileChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtPaquete, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkScripts)
                                    .addComponent(chkRepository)
                                    .addComponent(chkDomain)
                                    .addComponent(chkService)
                                    .addComponent(chkEditForm)
                                    .addComponent(chkListForm)
                                    .addComponent(chkLovBean)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chkBean)
                                        .addGap(18, 18, 18)
                                        .addComponent(rbCrud)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(rbAser)))
                                .addGap(24, 24, 24))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel12)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnNuevoCampo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel11)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtTabla, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                                            .addComponent(txtEntidad))
                                        .addGap(61, 61, 61)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnGenerar, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                            .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel10)
                                .addGap(206, 206, 206))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(21, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 935, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jLabel3)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2))
                    .addComponent(txtEntidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGenerar)
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNuevoCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPaquete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFileChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtNomConexion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtURLConexion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtContraseña, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2)
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkDomain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkRepository)
                        .addGap(6, 6, 6)
                        .addComponent(chkService)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkBean)
                            .addComponent(rbCrud)
                            .addComponent(rbAser))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkLovBean)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkEditForm)
                        .addGap(2, 2, 2)
                        .addComponent(chkListForm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkScripts))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {
            if (txtNomConexion.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "El nombre de la conexión es requerida");
            } else {
                Buscar();
            }
        } catch (ExceptionConnection ex) {
            Logger.getLogger(JClases.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        try {
            Generar();
        } catch (ExceptionConnection ex) {
            Logger.getLogger(JClases.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGenerarActionPerformed

    private void txtRutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRutaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRutaActionPerformed

    private void btnFileChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileChooseActionPerformed
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            try {
                // What to do with the file, e.g. display it in a TextArea      
                txtRuta.setText(file.getAbsolutePath() + "/");
            } catch (Exception ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_btnFileChooseActionPerformed

    private void txtUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsuarioActionPerformed

    private void btnNuevoCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoCampoActionPerformed
        Campo campo = new Campo();
        campo.setSelected(true);
        listaCampos.add(campo);
        CamposTableModel model = new CamposTableModel(listaCampos);
        jTable4.repaint();
        jTable4.addNotify();
        jTable4.changeSelection(listaCampos.size(), 1, false, false);
    }//GEN-LAST:event_btnNuevoCampoActionPerformed

    private void jlListaConexionesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlListaConexionesValueChanged
        if (!listaConex.isEmpty()) {
            Iterator iterador = listaConex.listIterator();
            JList list = (JList) evt.getSource();
            String selected = list.getSelectedValue().toString();
            while (iterador.hasNext()) {
                Conexion cnx = (Conexion) iterador.next();
                if (cnx.getNombre() == selected) {
                    conexionActiva = cnx;
                }
            }
            actualizaConexion();
        }
    }//GEN-LAST:event_jlListaConexionesValueChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Conexion conexion = new Conexion();
        asignaConexion(conexion);
        ConfConexion conf = new ConfConexion();
        try {
            conf.nuevaConexion(conexion);
            buscaConexiones();
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(JClases.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(JClases.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(JClases.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JClases.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void nuevaConexion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaConexion
        // TODO add your handling code here:
    }//GEN-LAST:event_nuevaConexion

    private void Buscar() throws ExceptionConnection {
        Connector oconnector = new Connector();
        oconnector.inicializarDataSource(txtUsuario.getText(), txtContraseña.getText(), txtURLConexion.getText());
        PreparedStatement stm = null;

        try {
            if (!txtTabla.getText().trim().equals("")) {
                nombreTabla = txtTabla.getText();
                nombreEntidad = ConviertNombre(nombreTabla.toLowerCase());
                txtEntidad.setText(firstLetterUpper(nombreEntidad));
                listaCampos = new ArrayList<>();
                CamposTableModel model1 = new CamposTableModel(listaCampos);
                jTable4.setModel(model1);

                if (oconnector.openConnection()) {
                    stm = (PreparedStatement) oconnector.getConexion().prepareStatement(JClases.SQLColumnas());
                    stm.setString(1, nombreTabla);

                    try {
                        ResultSet resultset2 = stm.executeQuery();

                        while (resultset2.next()) {
                            Campo campo = new Campo();
                            campo.setSelected(false);
                            campo.setNombreCampo(resultset2.getString("column_name").toLowerCase());
                            campo.setTipoCampo(resultset2.getString("data_type"));
                            campo.setNombreAtributo(ConviertNombre(campo.getNombreCampo().toLowerCase()));
                            campo.setTipoAtributo(tipoDato(campo.getTipoCampo()));
                            campo.setTipoRelacion("N/A");
                            campo.setComponente("N/A");
                            campo.setTamanno(resultset2.getInt("data_length"));
                            listaCampos.add(campo);
                        }
                        CamposTableModel model = new CamposTableModel(listaCampos);

                        jTable4.setModel(model);
                        if (jTable4.getColumnModel().getColumnCount() > 0) {
                            jTable4.getColumnModel().getColumn(0).setResizable(false);
                            jTable4.getColumnModel().getColumn(0).setPreferredWidth(5);
                            jTable4.getColumnModel().getColumn(2).setPreferredWidth(30);
                            jTable4.getColumnModel().getColumn(3).setPreferredWidth(10);
                            jTable4.getColumnModel().getColumn(4).setPreferredWidth(110);
                            jTable4.getColumnModel().getColumn(5).setPreferredWidth(30);
                            jTable4.getColumnModel().getColumn(6).setCellEditor(new javax.swing.DefaultCellEditor(cboRelacion));
                            jTable4.getColumnModel().getColumn(7).setPreferredWidth(170);
                            jTable4.getColumnModel().getColumn(7).setCellEditor(new javax.swing.DefaultCellEditor(cboTipoComponente));
                        }
                        if (resultset2.getRow() >= 1) {
                            txtEntidad.setEnabled(true);
                            btnGenerar.setEnabled(true);
                            btnNuevoCampo.setEnabled(true);
                            txtTitulo.setEnabled(true);
                        } else {
                            JOptionPane.showMessageDialog(null, "No se encontró la tabla");
                            txtEntidad.setEnabled(false);
                            btnGenerar.setEnabled(false);
                            txtTitulo.setEnabled(false);
                            btnNuevoCampo.setEnabled(false);
                        }
                    } catch (Exception e) {
                        throw new ExceptionConnection("Eror:" + e.toString(), 1, true, 3, "admisionDaoImpl");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "El nombre de la tabla es requerido");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
            throw new ExceptionConnection("Error:" + ex.toString(), 1, true, 3, "");
        } finally {
            if (stm != null) {
                try {
                    stm.close();
                    oconnector.closeConnection();
                } catch (SQLException sqlex) {
                    throw new ExceptionConnection("1008:" + "Error al cerrar statement", sqlex.toString(), 1, true, 3, "admisionDaoImpl");
                }//
            }//

        }//
    }

    /**
     * @param args the command line arguments
     */
    private void Generar() throws ExceptionConnection {
        Boolean check = false;
        int rows = jTable4.getModel().getRowCount();
        listaCampos = new ArrayList<>();
        nombreEntidad = txtEntidad.getText();
        directorio = txtRuta.getText();
        i18n = new StringBuilder();
        for (int i = 0; i < rows; i++) {//recore el modelo y llena nuevamente listaCAmpos con los datos personalizados
            if (jTable4.getModel().getValueAt(i, 0) != null) {
                check = (Boolean) jTable4.getModel().getValueAt(i, 0);
                if (check) {
                    Campo campo = new Campo();
                    campo.setNombreCampo((String) jTable4.getModel().getValueAt(i, 1));
                    campo.setTipoCampo((String) jTable4.getModel().getValueAt(i, 2));
                    campo.setTamanno((Integer) jTable4.getModel().getValueAt(i, 3));
                    campo.setNombreAtributo((String) jTable4.getModel().getValueAt(i, 4));
                    campo.setTipoAtributo((String) jTable4.getModel().getValueAt(i, 5));
                    campo.setTipoRelacion((String) jTable4.getModel().getValueAt(i, 6));
                    campo.setComponente((String) jTable4.getModel().getValueAt(i, 7));
                    campo.setEtiqueta((String) jTable4.getModel().getValueAt(i, 8));
                    listaCampos.add(campo);
                }
            }
        }

        if (chkDomain.isSelected()) {
            GenerarEntidad();
        }
        if (chkRepository.isSelected()) {
            GenerarRepository();
        }
        if (chkService.isSelected()) {
            GenerarService();
            GenerarServiceImpl();
        }
        if (chkBean.isSelected()) {
            if (rbCrud.isSelected()) {
                GenerarModelBeanCRUD();
            } else {
                GenerarModelBeanASER();
            }
        }
        if (chkLovBean.isSelected()) {
            GenerarModelLOVBean();
        }
        if (chkListForm.isSelected()) {
            GenerarListForm();
        }
        if (chkEditForm.isSelected()) {
            GenerarEditForm();
        }
        if (chkScripts.isSelected()) {
            GenerarInternacionalizacion();
        }

        JOptionPane.showMessageDialog(null, "Archivos creados exitosamente!");

    }

    public void buscaConexiones() throws ParserConfigurationException, TransformerException {
        ConfConexion conf = new ConfConexion();
        listaConex = new ArrayList<>();
        listaConex = conf.listaConexiones();
        DefaultListModel listModel = new DefaultListModel();
        Iterator iterador = listaConex.listIterator();
        while (iterador.hasNext()) {
            Conexion cnx = (Conexion) iterador.next();
            listModel.addElement(cnx.getNombre());
        }
        jlListaConexiones.setModel(listModel);
    }

    public void actualizaConexion() {
        txtNomConexion.setText(conexionActiva.getNombre());
        txtURLConexion.setText(conexionActiva.getURL());
        txtUsuario.setText(conexionActiva.getUsuario());
        txtContraseña.setText(conexionActiva.getContrasena());
    }

    public void asignaConexion(Conexion conexion) {//asigna los valor de los txt y los asigna a la conexion enviada
        conexion.setNombre(txtNomConexion.getText());
        conexion.setURL(txtURLConexion.getText());
        conexion.setUsuario(txtUsuario.getText());
        conexion.setContrasena(txtContraseña.getText());
    }

    public void actualizarCambios() {
        int rows = jTable4.getModel().getRowCount();
        listaCampos = new ArrayList<>();
        nombreEntidad = txtEntidad.getText();
        directorio = txtRuta.getText();

        for (int i = 0; i < rows; i++) {
            if (jTable4.getModel().getValueAt(i, 0) != null) {
                Campo campo = new Campo();
                campo.setNombreCampo((String) jTable4.getModel().getValueAt(i, 1));
                campo.setTipoCampo((String) jTable4.getModel().getValueAt(i, 2));
                campo.setNombreAtributo((String) jTable4.getModel().getValueAt(i, 3));
                campo.setTipoAtributo((String) jTable4.getModel().getValueAt(i, 4));
                campo.setTipoRelacion((String) jTable4.getModel().getValueAt(i, 5));
                listaCampos.add(campo);
            }
        }
    }
    
    
     public void GenerarArchivo(StringBuilder contenido, String extension) {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = directorio + nombreEntidad + extension;
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);           
            pw.println(contenido);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarEntidad() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = directorio + nombreEntidad + ".java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            pw.println("package " + txtPaquete.getText() + ".domain;");
            pw.println("import cr.ac.una.cgi.sdkuna.domain.CampoConfigurable;");
            pw.println("import cr.ac.una.cgi.sdkuna.domain.Usuario;");
            pw.println("import cr.ac.una.cgi.sdkuna.generic.BaseEntity;");
            pw.println("import javax.persistence.AttributeOverride;");
            pw.println("import javax.persistence.Column;");
            pw.println("import javax.persistence.Entity;");
            pw.println("import javax.persistence.SequenceGenerator;");
            pw.println("import javax.persistence.Table;");
            pw.println("import javax.persistence.FetchType;");
            pw.println("import javax.persistence.JoinColumn;");
            pw.println("import javax.persistence.ManyToOne;");
            pw.println("import javax.persistence.OneToOne;");
            pw.println("import javax.persistence.OneToMany;");
            pw.println("import javax.persistence.Transient;");
            pw.println("@Entity");
            pw.println("@Table(name = \"" + nombreTabla + "\")");
            pw.println("@AttributeOverride(name = \"id\", column =@Column(name = \"ID_" + nombreTabla + "\"))");
            pw.println("@SequenceGenerator(name = \"sequence\", sequenceName = \"SQ_" + nombreTabla + "\", allocationSize = 1)");

            pw.println("");

            pw.println("public class " + nombreEntidad + " extends BaseEntity<Usuario, CampoConfigurable> {");
            if (!listaCampos.isEmpty()) {
                Iterator iterador = listaCampos.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     

                    switch (c.getTipoRelacion()) {
                        case "@OneToOne":
                            pw.println("@OneToOne");
                            pw.println("@JoinColumn(name=\"" + c.getNombreCampo().toUpperCase() + "\")");
                            pw.println("private " + c.getTipoAtributo() + " " + c.getNombreAtributo() + ";");
                            break;
                        case "@OneToMany":
                            pw.println("@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true)");
                            pw.println("@JoinColumn(name = \"" + nombreTabla.toUpperCase() + "\", nullable = false)");
                            pw.println("private List<" + c.getTipoAtributo() + "> " + c.getNombreAtributo() + ";");
                            break;
                        case "@ManyToOne":
                            pw.println("@ManyToOne");
                            pw.println("@JoinColumn(name=\"" + c.getNombreCampo().toUpperCase() + "\")");
                            pw.println("private " + c.getTipoAtributo() + " " + c.getNombreAtributo() + ";");
                            break;
                        case "@ManyToOne(Mestro)":
                            pw.println("@ManyToOne(fetch = FetchType.LAZY, optional = false)");
                            pw.println("@JoinColumn(name=\"" + c.getNombreCampo().toUpperCase() + "\",referencedColumnName=\"ID_" + c.getNombreCampo().toUpperCase() + "\",nullable = false,insertable = false,updatable = false)");
                            pw.println("private " + c.getTipoAtributo() + " " + c.getNombreAtributo() + ";");
                            break;
                        case "@Transient":
                            pw.println("@Transient");
                            pw.println("private " + c.getTipoAtributo() + " " + c.getNombreAtributo() + ";");
                            break;
                        default:
                            pw.println("@Column(name=\"" + c.getNombreCampo().toUpperCase() + "\")");
                            pw.println("private " + c.getTipoAtributo() + " " + c.getNombreAtributo() + ";");
                            break;
                    }
                    pw.println("");
                }
                pw.println("");
                pw.println("public " + nombreEntidad + "() {}");//
                pw.println("");
                iterador = listaCampos.listIterator();
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("public " + c.getTipoAtributo() + " get" + firstLetterUpper(c.getNombreAtributo()) + "(){");
                    pw.println("return " + c.getNombreAtributo() + ";");
                    pw.println("}");
                    pw.println("");
                    pw.println("public void set" + firstLetterUpper(c.getNombreAtributo()) + "(" + c.getTipoAtributo() + " " + c.getNombreAtributo() + "){");
                    pw.println("this." + c.getNombreAtributo() + "=" + c.getNombreAtributo() + ";");
                    pw.println("}");
                    pw.println("");
                }
            }
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarRepository() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = directorio + nombreEntidad + "Repository.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            pw.println("package " + txtPaquete.getText() + ".repository;");
            pw.println("import " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import cr.ac.una.cgi.sdkuna.generic.GenericRepository;");
            pw.println("import org.springframework.stereotype.Repository;");
            pw.println("import javax.persistence.Table;");
            pw.println("@Repository");
            pw.println("");
            pw.println("public interface " + nombreEntidad + "Repository extends GenericRepository<" + nombreEntidad + "> {");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarService() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = directorio + nombreEntidad + "Service.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            pw.println("package " + txtPaquete.getText() + ".service;");
            pw.println("import  " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import cr.ac.una.cgi.sdkuna.api.service.EntityService;");
            pw.println("import java.util.List;");
            pw.println("public interface " + nombreEntidad + "Service extends EntityService<" + nombreEntidad + "> {");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarServiceImpl() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = directorio + nombreEntidad + "ServiceImpl.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            pw.println("package " + txtPaquete.getText() + ".service;");
            pw.println("import " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import " + txtPaquete.getText() + ".repository." + nombreEntidad + "Repository;");
            pw.println("import cr.ac.una.cgi.sdkuna.api.service.EntityServiceImpl;");
            pw.println("import java.util.List;");
            pw.println("import org.springframework.stereotype.Service;");
            pw.println("import org.springframework.transaction.annotation.Transactional;");
            pw.println("");
            pw.println("@Service");
            pw.println("@Transactional");
            pw.println("public class " + nombreEntidad + "ServiceImpl extends EntityServiceImpl<" + nombreEntidad + ", " + nombreEntidad + "Repository> implements " + nombreEntidad + "Service {");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarModelBeanCRUD() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = directorio + nombreEntidad + "Bean.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);

            pw.println("package " + txtPaquete.getText() + ".view.model;");
            pw.println("import " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import " + txtPaquete.getText() + ".service." + nombreEntidad + "Service;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.CRUD;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.CRUDColumn;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.CRUDImpl;");            
            pw.println("import java.util.List;");
            pw.println("import org.springframework.context.annotation.Scope;");
            pw.println("import org.springframework.stereotype.Component;");
            pw.println("import javax.annotation.PostConstruct;");

            pw.println("@Component");
            pw.println("@Scope(\"session\")");
            pw.println("public class " + nombreEntidad + "Bean extends CRUDImpl<" + nombreEntidad + ", " + nombreEntidad + "Service> implements CRUD{");

            pw.println("");
            pw.println("@PostConstruct");
            pw.println("public void init(){");
            pw.println("List<CRUDColumn> columns = new ArrayList();");
            if (!listaCampos.isEmpty()) {
                Iterator iterador = listaCampos.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
                Integer columNumber = 1;
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("CRUDColumn column" + columNumber + " =new CRUDColumn(\"" + c.getNombreAtributo() + "\",getI18n(\"" + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label\"),true);");
                    columNumber += 1;
                }
                columNumber = 1;
                iterador = listaCampos.listIterator();
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("columns.add(column" + columNumber + ");");
                    columNumber += 1;
                }
                pw.println("this.setTableColumns(columns);");
            }
            pw.println("}");
            pw.println("public List<" + nombreEntidad + "> completo" + nombreEntidad + "(String query,String campo){");
            pw.println(" return service.findAutoComplete(query, campo);");
            pw.println("}");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarModelBeanASER() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = directorio + nombreEntidad + "Bean.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);

            pw.println("package " + txtPaquete.getText() + ".view.model;");
            pw.println("import " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import " + txtPaquete.getText() + ".service." + nombreEntidad + "Service;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.ASER;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.ASERColumn;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.ASERImpl;");            
            pw.println("import java.util.List;");
            pw.println("import org.springframework.context.annotation.Scope;");
            pw.println("import org.springframework.stereotype.Component;");
            pw.println("import javax.annotation.PostConstruct;");

            pw.println("@Component");
            pw.println("@Scope(\"session\")");
            pw.println("public class " + nombreEntidad + "Bean extends ASERImpl<" + nombreEntidad + "> implements ASER{");

            pw.println("");
            pw.println("@PostConstruct");
            pw.println("public void init(){");
            pw.println("List<ASERColumn> columns = new ArrayList();");
            if (!listaCampos.isEmpty()) {
                Iterator iterador = listaCampos.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
                Integer columNumber = 1;

                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("ASERColumn column" + columNumber + " =new ASERColumn(\"" + c.getNombreAtributo() + "\",getI18n(\"" + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label\"),true);");

                    columNumber += 1;
                }
                columNumber = 1;
                iterador = listaCampos.listIterator();
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("columns.add(column" + columNumber + ");");
                    columNumber += 1;
                }
                pw.println("this.setColumnsDetails(columns);");

            }
            pw.println("}");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarModelLOVBean() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = directorio + nombreEntidad + "LOVBean.java";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);

            pw.println("package " + txtPaquete.getText() + ".lov;");
            pw.println("import " + txtPaquete.getText() + ".domain." + nombreEntidad + ";");
            pw.println("import " + txtPaquete.getText() + ".service." + nombreEntidad + "Service;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.LOV;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.LOVColumn;");
            pw.println("import cr.ac.una.cgi.sdkuna.view.commons.LOVImpl;");
            pw.println("import java.util.ArrayList;");
            pw.println("import java.util.List;");
            pw.println("import org.springframework.context.annotation.Scope;");
            pw.println("import org.springframework.stereotype.Component;");
            pw.println("import javax.annotation.PostConstruct;");

            pw.println("@Component");
            pw.println("@Scope(\"session\")");
            pw.println("public class " + nombreEntidad + "LOVBean extends LOVImpl<" + nombreEntidad + ", " + nombreEntidad + "Service> implements LOV{");
            pw.println("");
            pw.println("@PostConstruct");
            pw.println("public void init(){");
            pw.println("List<LOVColumn> columns = new ArrayList();");
            if (!listaCampos.isEmpty()) {
                Iterator iterador = listaCampos.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
                Integer columnumber = 1;
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("LOVColumn column" + columnumber + " =new LOVColumn(\"" + c.getNombreAtributo() + "\",getI18n(\"" + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label\"),true);");
                    columnumber += 1;
                }
                columnumber = 1;
                iterador = listaCampos.listIterator();
                while (iterador.hasNext()) {
                    Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                     
                    pw.println("columns.add(column" + columnumber + ");");
                    columnumber += 1;
                }
                pw.println("this.setTableColumns(columns);");
            }
            pw.println("}");
            pw.println("}");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarListForm() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = directorio + firstLetterLower(nombreEntidad) + "ListForm.xhtml";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            agregarComentarioInternacionalizacion(firstLetterLower(nombreEntidad) + "ListForm.xhtml");
            pw.println("<ui:composition template=\"../templates/crud.xhtml\"");
            pw.println("xmlns=\"http://www.w3.org/1999/xhtml\"  ");
            pw.println("xmlns:f=\"http://java.sun.com/jsf/core\"");
            pw.println("xmlns:h=\"http://java.sun.com/jsf/html\"");
            pw.println("xmlns:ui=\"http://java.sun.com/jsf/facelets\"");
            pw.println("xmlns:p=\"http://primefaces.org/ui\"");
            pw.println("xmlns:components=\"http://java.sun.com/jsf/composite/components\">");
            pw.println("");
            pw.println("<ui:define name=\"preRender\">");
            pw.println("<f:event type=\"preRenderView\" listener=\"#{" + firstLetterLower(nombreEntidad) + "Bean.list()}\"/>");
            pw.println("</ui:define>");
            pw.println("");
            pw.println("<ui:define name=\"title\">#{i18n." + nombreTabla.toLowerCase() + "_list_form_title}</ui:define>");
            agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_list_form_title", txtTitulo.getText());
            pw.println("<ui:define name=\"contentCRUD\">");
            pw.println("<components:toolbar id=\"toolbar\"");
            pw.println("editMode=\"false\"");
            pw.println("bean=\"#{" + firstLetterLower(nombreEntidad) + "Bean}\"");
            pw.println("listForm=\"" + firstLetterLower(nombreEntidad) + "EditForm\"");
            pw.println("editForm=\"" + firstLetterLower(nombreEntidad) + "EditForm\"");
            pw.println("backForm=\"" + firstLetterLower(nombreEntidad) + "ListForm\"");
            pw.println("container=\"noEditTable:dataTable\"/>");
            pw.println("<components:noEditTable id=\"noEditTable\"");
            pw.println("header=\"#{i18n." + nombreTabla.toLowerCase() + "_list_form_table_header}\"");
            agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_list_form_table_header", "Lista de " + txtTitulo.getText());
            pw.println("bean=\"#{" + firstLetterLower(nombreEntidad) + "Bean}\"");
            pw.println("editForm=\"" + firstLetterLower(nombreEntidad) + "EditForm\"/>");
            pw.println("</ui:define>");
            pw.println("");
            pw.println("</ui:composition>");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void GenerarEditForm() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        Boolean detailNoEditTableBoolean = false;
        StringBuilder detailNoEditTable = new StringBuilder();
        try {
            ruta = directorio + firstLetterLower(nombreEntidad) + "EditForm.xhtml";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);

            pw.println("<ui:composition template=\"../templates/crud.xhtml\"");
            pw.println("xmlns=\"http://www.w3.org/1999/xhtml\"  ");
            pw.println("xmlns:f=\"http://java.sun.com/jsf/core\"");
            pw.println("xmlns:h=\"http://java.sun.com/jsf/html\"");
            pw.println("xmlns:ui=\"http://java.sun.com/jsf/facelets\"");
            pw.println("xmlns:p=\"http://primefaces.org/ui\"");
            pw.println("xmlns:sdkuna=\"http://cgi.una.ac.cr/sdkuna\"");
            pw.println("xmlns:components=\"http://java.sun.com/jsf/composite/components\">");
            pw.println("");
            if (rbCrud.isSelected()) {//si es un crud agregar el preRender con el metodo find()
                pw.println("<ui:define name=\"preRender\">");
                pw.println("<f:event type=\"preRenderView\" listener=\"#{" + firstLetterLower(nombreEntidad) + "Bean.find()}\"/>");
                pw.println("</ui:define>");
                pw.println("");
            }
            pw.println("<ui:define name=\"title\">#{i18n." + nombreTabla.toLowerCase() + "_edit_form_title}</ui:define>");
            agregarComentarioInternacionalizacion(firstLetterLower(nombreEntidad) + "EditForm.xhtml");
            agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_edit_form_title", "Mantenimiento de " + txtTitulo.getText());
            pw.println("<ui:define name=\"contentCRUD\">");
            if (rbCrud.isSelected()) {
                pw.println("<components:toolbar id=\"toolbar\"");
                pw.println("editMode=\"true\"");
                pw.println("bean=\"#{" + firstLetterLower(nombreEntidad) + "Bean}\"");
                pw.println("listForm=\"" + firstLetterLower(nombreEntidad) + "ListForm\"");
                pw.println("editForm=\"" + firstLetterLower(nombreEntidad) + "EditForm\"");
                pw.println("backForm=\"" + firstLetterLower(nombreEntidad) + "ListForm\"");
                pw.println("container=\"panelForm\" ");
                pw.println("/>");
            } else {
                pw.println("<components:detailToolbar id=\"toolbar\"");
                pw.println("bean=\"#{" + firstLetterLower(nombreEntidad) + "Bean}\"");
                pw.println("listForm=\"xxxxxxxEditForm\"");
                pw.println("editForm=\"" + firstLetterLower(nombreEntidad) + "EditForm\"");
                pw.println("backForm=\"xxxxxxEditForm\"");
                pw.println("container=\"panelForm\" ");
                pw.println("masterBean=\"#{xxxxxBean}\"");
                pw.println("/>");
            }
            pw.println("<p:panel id=\"panelForm\" binding=\"#{panelForm}\" header=\"#{i18n." + nombreTabla.toLowerCase() + "_edit_form_header}\">");
            pw.println("<components:requiredInstructions focus=\"panelForm\"/>");
            agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_edit_form_header", "Mantenimiento de " + txtTitulo.getText());
            pw.println("<p:panelGrid columns=\"3\" styleClass=\"una-panelgrid\">");
            Iterator iterador = listaCampos.listIterator();
            while (iterador.hasNext()) {
                Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
                switch (c.getComponente()) {
                    case "p:inputText":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "InputText\"  value=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label}\" />");
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label", c.getEtiqueta());
                        pw.println("<p:inputText id=\"" + c.getNombreAtributo() + "InputText\"\n"
                                + "value=\"#{" + firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "required=\"true\"\n"
                                + "size=\"25\">\n"
                                + "</p:inputText>");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "InputText\"/>");
                        pw.println("");
                        break;
                    case "sdkuna:inputTextArea":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "InputTextArea\"  value=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label}\" />");
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label", c.getEtiqueta());
                        pw.println("<sdkuna:inputTextArea  id=\"" + c.getNombreAtributo() + "InputTextArea\"\n"
                                + "value=\"#{" + firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "required=\"true\"\n"
                                + "cols=\"60\"\n"
                                + "rows=\"6\"/>");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "InputTextArea\"/>");
                        pw.println("");
                        break;
                    case "components:inputTextArea":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "InputTextArea\"  value=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label}\" />");
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label", c.getEtiqueta());
                        pw.println(" <components:inputTextArea id=\"" + c.getNombreAtributo() + "InputTextArea\"\n"
                                + "value=\"#{" + firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "required=\"true\" />");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "InputTextArea\"/>");
                        break;
                    case "p:selectBooleanCheckbox":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "SelectBooleanCheckbox\"  value=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label}\" />");
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label", c.getEtiqueta());
                        pw.println("<p:selectBooleanCheckbox id=\"" + c.getNombreAtributo() + "SelectBooleanCheckbox\" value=\"#{" + firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\" />");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "SelectBooleanCheckbox\"/>");
                        pw.println("");
                        break;
                    case "p:calendar":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "Calendar\"  value=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label}\" />");
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label", c.getEtiqueta());
                        pw.println("<p:calendar id=\"" + c.getNombreAtributo() + "Calendar\"\n"
                                + "value=\"#{" + firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "required=\"true\"\n"
                                + "showOn=\"button\"\n"
                                + "pattern=\"dd/MM/yyy\"\n"
                                + "navigator=\"true\"\n"
                                + "locale=\"es\"/>");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "Calendar\"/>");
                        pw.println("");
                        break;
                    case "p:selectOneMenu":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "SelectOneMenu\"  value=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label}\" />");
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label", c.getEtiqueta());
                        pw.println("<p:selectOneMenu id=\"" + c.getNombreAtributo() + "SelectOneMenu\"\n"
                                + "value=\"#{" + firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "required=\"true\"\n"
                                + "converter=\"#{" + c.getNombreAtributo() + "Bean.converter}\">\n"
                                + "<f:selectItem itemLabel=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_select_label}\"\n"
                                + "itemValue=\"\"\n"
                                + "noSelectionOption=\"\"/>\n"
                                + "<f:selectItems value=\"#{" + firstLetterLower(nombreEntidad) + "Bean.lista" + firstLetterUpper(c.getNombreAtributo()) + "()}\"\n"
                                + "var=\"" + c.getNombreAtributo() + "\"\n"
                                + "itemLabel=\"#{" + c.getNombreAtributo() + ".nombre}\"\n"
                                + "itemValue=\"#{" + c.getNombreAtributo() + "}\"/>\n"
                                + "</p:selectOneMenu>");
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_select_label", "Seleccione XX " + c.getEtiqueta().toLowerCase());
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "SelectOneMenu\"/>");
                        pw.println("");
                        break;
                    case "components:detailNoEditTableHorizontal":
                        detailNoEditTableBoolean = true;
                        detailNoEditTable.append("<components:detailNoEditTableHorizontal     id=\"" + c.getNombreAtributo() + "TabNoEditTable\"\n");
                        detailNoEditTable.append("bean=\"#{" + firstLetterLower(c.getTipoAtributo()) + "Bean}\"\n");
                        detailNoEditTable.append("masterBean=\"#{" + firstLetterLower(nombreEntidad) + "Bean}\"\n");
                        detailNoEditTable.append("editForm=\"" + firstLetterLower(c.getTipoAtributo()) + "EditForm\"\n");
                        detailNoEditTable.append("header=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label}\"/>\n");
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label", "Lista de " + c.getEtiqueta());
                        break;
                    case "p:spinner":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "SpinnerOutputLabel\" for=\"" + c.getNombreAtributo() + "Spinner\"  value=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label}\" />");
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label", c.getEtiqueta());
                        pw.println(" <p:spinner id=\"" + c.getNombreAtributo() + "Spinner\"                                                          \n"
                                + "value=\"#{" + firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "min=\"1\" max=\"1000\"> \n"
                                + "</p:spinner>");
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "Spinner\"/>");
                        pw.println("");
                        break;
                    case "p:editor":
                        pw.println(" <p:editor id=\"" + c.getNombreAtributo() + "Editor\"\n"
                                + "value=\"#{" + firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "style=\"width: 100%\"/>");
                        pw.println("");
                        break;
                    case "p:autoComplete":
                        pw.println("<p:outputLabel id=\"" + c.getNombreAtributo() + "OutputLabel\" for=\"" + c.getNombreAtributo() + "AutoComplete\"  value=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label}\" />");
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_label", c.getEtiqueta());
                        pw.println("<p:outputPanel id=\"" + c.getNombreAtributo() + "OutputPanel\">");
                        pw.println("<p:autoComplete id=\"" + c.getNombreAtributo() + "AutoComplete\"\n"
                                + "dropdown=\"true\"\n"
                                + "value=\"#{" + firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "var=\"" + c.getNombreAtributo() + "\"\n"
                                + "itemLabel=\"#{" + c.getNombreAtributo() + ".DESCRIPCION}\"\n"
                                + "itemValue=\"#{" + c.getNombreAtributo() + "}\"\n"
                                + "completeMethod=\"#{" + firstLetterLower(nombreEntidad) + "Bean.complete" + firstLetterUpper(c.getNombreAtributo()) + "}\"\n"
                                + "converter=\"#{" + c.getNombreAtributo() + "Bean.converter}\"\n"
                                + "forceSelection=\"true\"\n"
                                + "scrollHeight=\"200\"\n"
                                + "required=\"true\">\n"
                                + "\n"
                                + "</p:autoComplete>\n"
                                + "<p:watermark id=\"" + c.getNombreAtributo() + "AutoCompleteWatermark\"\n"
                                + "for=\"" + c.getNombreAtributo() + "AutoComplete\"\n"
                                + "value=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_select_label}\" />\n"
                                + "\n"
                                + "<p:commandButton id=\"" + c.getNombreAtributo() + "ClearCommandButton\"\n"
                                + "title=\"#{i18n." + nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_clear_button}\"\n"
                                + "icon=\"ui-icon-arrowreturnthick-1-w\"\n"
                                + "process=\"@this\"\n"
                                + "actionListener=\"#{" + firstLetterLower(nombreEntidad) + "Bean.handleClear" + firstLetterUpper(c.getNombreAtributo()) + "}\"\n"
                                + "update=\"" + c.getNombreAtributo() + "OutputPanel\" />\n"
                                + "\n"
                                + "<components:dialogFrameworkData id=\"" + c.getNombreAtributo() + "ListDialog\"\n"
                                + "lOVBean=\"#{" + firstLetterLower(c.getNombreAtributo()) + "LOVBean}\"\n"
                                + "target=\"#{" + firstLetterLower(nombreEntidad) + "Bean.entity." + c.getNombreAtributo() + "}\"\n"
                                + "update=\"" + c.getNombreAtributo() + "AutoComplete\" />\n"
                                + "</p:outputPanel>");
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_clear_button", "Limpiar " + c.getEtiqueta().toLowerCase());
                        agregarLineaInternacionalizacion(nombreTabla.toLowerCase() + "_" + c.getNombreCampo().toLowerCase() + "_select_label", "Selecciones XX " + c.getEtiqueta().toLowerCase());
                        pw.println("<p:message id=\"" + c.getNombreAtributo() + "Message\" for=\"" + c.getNombreAtributo() + "AutoComplete\"/>");
                        pw.println("");
                        break;
                }
            }
            pw.println("</p:panelGrid> ");
            if (detailNoEditTableBoolean) {//si hay un detalle lo concatena
                pw.println(detailNoEditTable.toString());
            }
            pw.println("</p:panel>");
            pw.println("</ui:define>");
            pw.println("</ui:composition>");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public void agregarLineaInternacionalizacion(String llave, String valor) {
        i18n.append("insert into i18n (version, usuario_creacion, fecha_creacion, fecha_modificacion, usuario_modificacion, campo_configurable, idioma, llave, valor, id_i18n) \nvalues (0, 5, sysdate, sysdate, 5, NULL, 'es', '"
                + llave + "', '" + valor + "', SQ_I18N.nextval);\n");
    }

    public void agregarComentarioInternacionalizacion(String cadena) {//
        i18n.append("-----------" + cadena + "---------------------\n");
    }

    public void agregarRecurso(String nombre, String valor) {
        i18n.append("insert into recurso (version, usuario_creacion, fecha_creacion, fecha_modificacion, usuario_modificacion, campo_configurable, estado, link_ayuda, nombre, notas, recurso, sequencia, tipo_recurso, visible, id_recurso)\n"
                + "values (0, 5, 5, sysdate, 5, null, 1, null, " + nombre + ", NULL, NULL, 1, 1, 1, null); \n");
    }

    public void GenerarInternacionalizacion() {
        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";
        try {
            ruta = directorio + nombreEntidad + "_i18n.txt";
            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            pw.println(i18n);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());
        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    // <editor-fold defaultstate="collapsed" desc="Data base"> 
    public StringBuilder declaraParametrosSP(ArrayList lista, String tabla) {
        StringBuilder cadena = new StringBuilder();
        Iterator iterador = lista.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella

        int cuentalista = 0;
        while (iterador.hasNext()) {    //imprimo las variables que recibira el sp                

            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append("p_" + c.getNombreCampo() + " " + c.getTipoCampo());
            cuentalista++;
            if (cuentalista != lista.size()) {
                cadena.append(",");
            }
        }
        return cadena;
    }

    public StringBuilder declaraParametrosMetodo(ArrayList lista, String tabla) {
        StringBuilder cadena = new StringBuilder();
        Iterator iterador = lista.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella

        int cuentalista = 0;
        while (iterador.hasNext()) {    //imprimo las variables que recibira el sp                

            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append(tipoDato(c.getTipoCampo()) + " p_" + c.getNombreCampo());
            cuentalista++;
            if (cuentalista != lista.size()) {
                cadena.append(",");
            }
        }
        return cadena;
    }

    public StringBuilder SQLSELECT(ArrayList lista, String tabla) {
        StringBuilder cadena = new StringBuilder();
        Iterator iterador = lista.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella

        cadena.append("public synchronized static String lista_" + firstUpper(tabla) + "() {");
        cadena.append("String sql = \"");
        cadena.append("Select ");
        int cuentalista = 0;
        while (iterador.hasNext()) {    //imprimo las variables que recibira el sp               

            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append(c.getNombreCampo());
            cuentalista++;
            if (cuentalista != lista.size()) {
                cadena.append(",");
            }
        }
        cadena.append(" from " + tabla);
        cadena.append("\";");
        cadena.append(" return (sql); }");
        return cadena;
    }

    public StringBuilder SQLSELECTWHERE(ArrayList lista, String tabla) throws ExceptionConnection {
        StringBuilder cadena = new StringBuilder();
        Iterator iterador = lista.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
        cadena.append("public synchronized static String busca" + firstUpper(tabla) + "() {");
        cadena.append("String sql = \"");
        cadena.append("Select ");
        int cuentalista = 0;
        while (iterador.hasNext()) {    //imprimo las variables que recibira el sp               

            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append(c.getNombreCampo());
            cuentalista++;
            if (cuentalista != lista.size()) {
                cadena.append(",");
            }
        }
        cadena.append(" from " + tabla);
        cadena.append(" where ");
        ArrayList listaCampos = new ArrayList();

        listaCampos = ObtenerPK(tabla);

        iterador = listaCampos.listIterator();
        cuentalista = 0;
        while (iterador.hasNext()) {
            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append(c.getNombreCampo() + " = ?");
            cadena.append("\n");
            cuentalista++;
            if (cuentalista != listaCampos.size()) {
                cadena.append(" and ");
            } else {
                cadena.append(";");
            }
        }
        cadena.append("\";");
        cadena.append(" return (sql); }");
        return cadena;
    }

    public StringBuilder SQL_CALL_SP(ArrayList lista, String tabla) {
        StringBuilder cadena = new StringBuilder();
        Iterator iterador = lista.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella

        cadena.append("public synchronized static String sp" + firstUpper(tabla) + "() {");
        cadena.append("String sql = \"");
        cadena.append("CALL sp_" + firstUpper(tabla) + "(?,");
        int cuentalista = 0;
        while (iterador.hasNext()) {    //imprimo las variables que recibira el sp               

            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append("?");
            cuentalista++;
            if (cuentalista != lista.size()) {
                cadena.append(",");
            }
        }
        cadena.append(")\";");
        cadena.append(" return (sql); }");
        return cadena;
    }

    public StringBuilder Parametros(ArrayList lista, String tabla) {
        StringBuilder cadena = new StringBuilder();
        Iterator iterador = lista.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella

        int cuentalista = 0;
        while (iterador.hasNext()) {    //imprimo las variables que recibira el sp                

            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append("p_" + c.getNombreCampo());
            cuentalista++;
            if (cuentalista != lista.size()) {
                cadena.append(",");
            }
        }
        return cadena;
    }

    public StringBuilder Campos(ArrayList lista, String tabla) {
        StringBuilder cadena = new StringBuilder();
        Iterator iterador = lista.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella

        int cuentalista = 0;
        while (iterador.hasNext()) {     //obtengo los nombres de los campos que se van a insertar               
            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append(c.getNombreCampo());
            cuentalista++;
            if (cuentalista != lista.size()) {
                cadena.append(",");
            }
        }
        return cadena;
    }

    public ArrayList ObtenerPK(String tabla) throws ExceptionConnection {
        Connector oconnector = new Connector();
        oconnector.inicializarDataSource(txtUsuario.getText(), txtContraseña.getPassword().toString(), txtURLConexion.getText());
        PreparedStatement prepareStatement = null;
        ArrayList<Campo> listaCampos = null;
        try {

            if (oconnector.openConnection()) {
                prepareStatement = (PreparedStatement) oconnector.getConexion().prepareStatement(JClases.SQLPk());
                prepareStatement.setString(1, tabla);
                ResultSet resultset = prepareStatement.executeQuery();

                listaCampos = new ArrayList();
                while (resultset.next()) {
                    Campo campo = new Campo();
                    campo.setNombreCampo(resultset.getString("column_name").toLowerCase());
                    campo.setTipoCampo(resultset.getString("data_type").toLowerCase());
                    listaCampos.add(campo);
                }
            }

        } catch (Exception ex) {
            throw new ExceptionConnection("Eror:" + ex.toString(), 1, true, 3, "admisionDaoImpl");
        } finally {
            if (prepareStatement != null) {
                try {
                    prepareStatement.close();
                    oconnector.closeConnection();
                } catch (SQLException sqlex) {
                    throw new ExceptionConnection("1008:" + "Error al cerrar statement", sqlex.toString(), 1, true, 3, "admisionDaoImpl");
                }//
            }//

        }//
        return listaCampos;
    }

    public StringBuilder Insert(ArrayList lista, String tabla) {
        StringBuilder cadena = new StringBuilder();
        cadena.append("INSERT INTO ");
        cadena.append(tabla);
        cadena.append("(");
        cadena.append(Campos(lista, tabla));
        cadena.append(") \n");
        cadena.append(" VALUES(");
        cadena.append(Parametros(lista, tabla));
        cadena.append(");");
        return cadena;
    }

    public StringBuilder Update(ArrayList lista, String tabla) throws ExceptionConnection {
        StringBuilder cadena = new StringBuilder();
        cadena.append("Update ");
        cadena.append(tabla);
        cadena.append(" set ");

        Iterator iterador = lista.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella

        int cuentalista = 0;
        while (iterador.hasNext()) {     //obtengo los nombres de los campos que se van a insertar               
            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append(c.getNombreCampo() + " = p_" + c.getNombreCampo());
            cuentalista++;
            if (cuentalista != lista.size()) {
                cadena.append(",");
            }
        }
        cadena.append("\n");
        cadena.append(" where ");
        ArrayList listaCampos = new ArrayList();

        listaCampos = ObtenerPK(tabla);

        iterador = listaCampos.listIterator();
        cuentalista = 0;
        while (iterador.hasNext()) {
            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append(c.getNombreCampo() + " = p_" + c.getNombreCampo());
            cadena.append("\n");
            cuentalista++;
            if (cuentalista != listaCampos.size()) {
                cadena.append(" and ");
            } else {
                cadena.append(";");
            }

        }

        return cadena;
    }

    public StringBuilder Delete(ArrayList lista, String tabla) throws ExceptionConnection {
        StringBuilder cadena = new StringBuilder();
        cadena.append("Delete from ");
        cadena.append(tabla);
        cadena.append("\n");
        cadena.append(" where ");
        ArrayList listaCampos = new ArrayList();
        listaCampos = ObtenerPK(tabla);
        Iterator iterador = listaCampos.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
        int cuentalista = 0;
        while (iterador.hasNext()) {
            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append(c.getNombreCampo() + " = p_" + c.getNombreCampo());
            cadena.append("\n");
            cuentalista++;
            if (cuentalista != listaCampos.size()) {
                cadena.append(" and ");
            } else {
                cadena.append(";");
            }
        }

        return cadena;
    }

    public void GenerarSP(ArrayList lista, String tabla) {

        FileWriter fichero = null;
        PrintWriter pw = null;
        String ruta = "";

        try {
            ruta = directorio + "sp_" + firstUpper(tabla) + ".sql";

            fichero = new FileWriter(ruta);
            pw = new PrintWriter(fichero);
            pw.println("CREATE OR REPLACE PROCEDURE ");
            pw.print("sp_" + firstUpper(tabla) + "(");
            pw.print("p_opcion NUMBER,");
            pw.print(declaraParametrosSP(lista, tabla));
            pw.print(")");
            pw.print("");
            pw.println("IS BEGIN");
            pw.println("");
            if (!lista.isEmpty()) {
                pw.println("CASE p_opcion");
                pw.println("WHEN 1 THEN ");
                pw.println(Insert(lista, tabla));
                pw.println("WHEN 2 THEN ");
                pw.println(Update(lista, tabla));
                pw.println("WHEN 3 THEN ");
                pw.println(Delete(lista, tabla));
            }
            pw.println("END CASE;");
            pw.println("END");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.toString());

        } finally {
            try {
                // Nuevamente aprovechamos el finally para 
                // asegurarnos que se cierra el fichero.
                if (null != fichero) {
                    fichero.close();
                }
            } catch (Exception e2) {
                JOptionPane.showMessageDialog(null, e2.toString());
            }
        }
    }

    public StringBuilder InsertUpdateDeleteDao(ArrayList lista, String tabla) throws ExceptionConnection {
        StringBuilder cadena = new StringBuilder();
        cadena.append("public void dml" + firstUpper(tabla) + "(int p_opcion, " + firstUpper(tabla) + "Bean " + tabla.toLowerCase() + "Bean) throws ExceptionConnection {");
        cadena.append("OraclePreparedStatement prepareStatement = null; ");
        cadena.append("try{ if(this.openConnection()){");
        cadena.append("prepareStatement =  (OraclePreparedStatement) this.getConexion().prepareStatement( " + firstUpper(tabla) + "SQL.sp" + tabla + "());");
        cadena.append("prepareStatement.setInt(1,p_opcion);");
        Iterator iterador = lista.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
        int cuentalista = 2;
        while (iterador.hasNext()) {
            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                    
            cadena.append("prepareStatement.set" + tipoDatoSTM(c.getTipoCampo()) + "(" + cuentalista + "," + tabla.toLowerCase() + "Bean.get" + firstUpper(c.getNombreCampo()) + "());");
            cadena.append("\n");
            cuentalista++;
        }
        cadena.append("prepareStatement.execute();}");
        cadena.append(" }catch(ExceptionConnection exc){");
        cadena.append("    throw exc;");
        cadena.append("}catch(SQLException sqlex){");
        cadena.append("throw new ExceptionConnection(\"1007:Error al insertar\", sqlex.toString() , 1, true, 3, \"dml" + tabla + "\");");
        cadena.append("}catch(Exception ex){");
        cadena.append("throw new ExceptionConnection(\"1007:Error al insertar\", ex.toString(), 1, true, 3, \"dml" + tabla + "\");");
        cadena.append("}finally{");
        cadena.append("if( prepareStatement != null ){");
        cadena.append("try {");
        cadena.append("prepareStatement.close();");
        cadena.append("this.closeConnection();");
        cadena.append("} catch (SQLException sqlex) {");
        cadena.append("throw new ExceptionConnection(\"1008:Error al cerrar statement\", sqlex.toString() , 1, true, 3, \"" + tabla + "\");");
        cadena.append("} } } }");

        return cadena;
    }

    public StringBuilder GenerarListadoDao(ArrayList lista, String tabla) throws ExceptionConnection {
        StringBuilder cadena = new StringBuilder();
        cadena.append("public ArrayList<" + firstUpper(tabla) + "Bean> Listar" + firstUpper(tabla) + "() throws ExceptionConnection {");
        cadena.append("OraclePreparedStatement prepareStatement = null; ");
        cadena.append("ArrayList<" + firstUpper(tabla) + "Bean> array" + firstUpper(tabla) + " = new ArrayList<" + firstUpper(tabla) + "Bean>();");
        cadena.append("try{ if(this.openConnection()){");
        cadena.append("prepareStatement =  (OraclePreparedStatement) this.getConexion().prepareStatement( " + firstUpper(tabla) + "SQL.Lista" + firstUpper(tabla) + "());");
        cadena.append("ResultSet resultSet = prepareStatement.executeQuery();");
        cadena.append("while (resultSet.next()) {");
        cadena.append("" + firstUpper(tabla) + "Bean o" + firstUpper(tabla) + " = new " + firstUpper(tabla) + "Bean();");
        Iterator iterador = lista.listIterator(); //Le solicito a la lista que me devuelva un iterador con todos los el elementos contenidos en ella
        int cuentalista = 2;
        while (iterador.hasNext()) {
            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido
            cadena.append("o" + firstUpper(tabla) + ".set" + firstUpper(c.getNombreCampo()) + "(resultSet.get" + tipoDatoSTM(c.getTipoCampo()) + "(\"" + c.getNombreCampo() + "\"));");
            cadena.append("\n");
            cuentalista++;
        }
        cadena.append("array" + firstUpper(tabla) + ".add(o" + firstUpper(tabla) + ");");
        cadena.append("}");
        cadena.append("}");
        cadena.append(" }catch(ExceptionConnection exc){");
        cadena.append("    throw exc;");
        cadena.append("}catch(SQLException sqlex){");
        cadena.append("throw new ExceptionConnection(\"1007:Error al insertar\", sqlex.toString() , 1, true, 3, \"dml" + tabla + "\");");
        cadena.append("}catch(Exception ex){");
        cadena.append("throw new ExceptionConnection(\"1007:Error al insertar\", ex.toString(), 1, true, 3, \"dml" + tabla + "\");");
        cadena.append("}finally{");
        cadena.append("if( prepareStatement != null ){");
        cadena.append("try {");
        cadena.append("prepareStatementner.close();");
        cadena.append("this.closeConnection();");
        cadena.append("} catch (SQLException sqlex) {");
        cadena.append("throw new ExceptionConnection(\"1008:Error al cerrar statement\", sqlex.toString() , 1, true, 3, \"" + tabla + "\");");
        cadena.append("} } } ");
        cadena.append("return array" + firstUpper(tabla) + ";");
        cadena.append("}");

        return cadena;
    }

    public StringBuilder GenerarBuscaBeanDao(ArrayList lista, String tabla) throws ExceptionConnection {
        StringBuilder cadena = new StringBuilder();
        Iterator iterador = lista.listIterator();
        cadena.append("public Boolean busca" + firstUpper(tabla) + "(" + firstUpper(tabla) + "Bean " + tabla.toLowerCase() + "Bean) throws ExceptionConnection {");
        cadena.append("OraclePreparedStatement prepareStatement = null; ");
        cadena.append("boolean encontrado=false;");
        cadena.append("try{ if(this.openConnection()){");
        cadena.append("prepareStatement =  (OraclePreparedStatement) this.getConexion().prepareStatement( " + firstUpper(tabla) + "SQL.Busca" + firstUpper(tabla) + "());");
        //optiene la llave primaria para asignar los valores a filtar en el where del sql
        ArrayList listaPK = new ArrayList();
        listaPK = ObtenerPK(tabla);
        iterador = listaPK.listIterator();
        int cuentalista = 1;
        while (iterador.hasNext()) {
            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido                              
            cadena.append("prepareStatement.set" + tipoDato(c.getTipoCampo().toUpperCase()) + "(" + cuentalista + ", " + tabla.toLowerCase() + "Bean.get" + firstUpper(c.getNombreCampo()) + "());");
            cadena.append("\n");
            cuentalista++;
        }
        cadena.append("ResultSet resultSet = prepareStatement.executeQuery();");
        cadena.append("resultSet.next();");
        cadena.append("if(resultSet.getRow()> 0) {");
        iterador = lista.iterator();
        while (iterador.hasNext()) {
            Campo c = (Campo) iterador.next(); //Obtengo el elemento contenido
            cadena.append(tabla.toLowerCase() + "Bean.set" + firstUpper(c.getNombreCampo()) + "(resultSet.get" + tipoDatoSTM(c.getTipoCampo()) + "(\"" + c.getNombreCampo() + "\"));");
            cadena.append("\n");
        }
        cadena.append("encontrado=true;");
        cadena.append("}");
        cadena.append("}");
        cadena.append(" }catch(ExceptionConnection exc){");
        cadena.append("    throw exc;");
        cadena.append("}catch(SQLException sqlex){");
        cadena.append("throw new ExceptionConnection(\"1007:Error al insertar\", sqlex.toString() , 1, true, 3, \"dml" + tabla + "\");");
        cadena.append("}catch(Exception ex){");
        cadena.append("throw new ExceptionConnection(\"1007:Error al insertar\", ex.toString(), 1, true, 3, \"dml" + tabla + "\");");
        cadena.append("}finally{");
        cadena.append("if( prepareStatement != null ){");
        cadena.append("try {");
        cadena.append("prepareStatement.close();");
        cadena.append("this.closeConnection();");
        cadena.append("} catch (SQLException sqlex) {");
        cadena.append("throw new ExceptionConnection(\"1008:Error al cerrar statement\", sqlex.toString() , 1, true, 3, \"" + tabla + "\");");
        cadena.append("} } } ");
        cadena.append("return encontrado;");
        cadena.append("}");
        return cadena;
    }

    //</editor-fold>
    public String firstUpper(String texto) {//recibe un string y delvuelve el mismo string con la primera letra en mayuscula y las demas en minuscula
        if (texto.length() > 0) {
            texto = texto.replace(texto.substring(0, 1), texto.substring(0, 1).toUpperCase());
            texto = texto.replace(texto.substring(1, texto.length()), texto.substring(1, texto.length()).toLowerCase());
        }
        return texto;
    }

    public String firstLower(String texto) {//recibe un string y delvuelve el mismo estring con la primera letra en minuscula 
        if (texto.length() > 0) {
            texto = texto.replace(texto.substring(0, 1), texto.substring(0, 1).toLowerCase());
            texto = texto.replace(texto.substring(1, texto.length()), texto.substring(1, texto.length()).toLowerCase());
        }
        return texto;
    }

    public String firstLetterUpper(String texto) {//recibe un string y delvuelve el mismo string con la primera letra en mayuscula y las demas en el mismo estado
        if (texto.length() > 0) {
            String letraM = texto.substring(0, 1).toUpperCase();
            texto = letraM.concat(texto.substring(1, texto.length()));
        }
        return texto;
    }

    public String firstLetterLower(String texto) {//recibe un string y delvuelve el mismo string con la primera letra en mayuscula y las demas en el mismo estado
        if (texto.length() > 0) {
            String letraM = texto.substring(0, 1).toLowerCase();
            texto = letraM.concat(texto.substring(1, texto.length()));
        }
        return texto;
    }

    public String ConviertNombre(String frase) {//despues de cada "_" convierte la siguiente letra en mayuscula y elimina los "_"
        String frase2 = "";
        int indice = 0;
        int indicepunto = 0;

        indicepunto = frase.indexOf('_', indice);
        while (indicepunto >= 0) {
            // El primer carácter es en mayúsculas
            frase2 = frase2 + frase.substring(indice, indice + 1).toUpperCase();
            // Pegamos el resto hasta el primer punto      
            frase2 = frase2 + frase.substring(indice + 1, indicepunto + 1);

            indice = indicepunto + 1;
            indicepunto = frase.indexOf('_', indice);
        }
        // Incluimos el final de la frase
        frase2 = frase2 + frase.substring(indice, indice + 1).toUpperCase();
        frase2 = frase2 + frase.substring(indice + 1, frase.length());
        frase2 = frase2.replaceAll("_", "");
        frase2 = frase2.replace(frase2.substring(0, 1), frase2.substring(0, 1).toLowerCase());
        return frase2;
    }

    public String tipoDato(String tipo) {
        String texto;
        switch (tipo) {
            case "VARCHAR2":
                texto = "String";
                break;
            case "VARCHAR":
                texto = "String";
                break;
            case "CHAR":
                texto = "String";
                break;
            case "NCHAR":
                texto = "String";
                break;
            case "NVARCHAR":
                texto = "String";
                break;
            case "NUMBER":
                texto = "int";
                break;
            case "LONG":
                texto = "double";
                break;
            case "DATE":
                texto = "Date";
            default:
                texto = firstUpper(tipo);
                break;
        }
        return texto;
    }

    public String tipoDatoSTM(String tipo) {
        String texto;
        switch (tipo) {
            case "VARCHAR2":
                texto = "String";
                break;
            case "VARCHAR":
                texto = "String";
                break;
            case "CHAR":
                texto = "String";
                break;
            case "NCHAR":
                texto = "String";
                break;
            case "NVARCHAR":
                texto = "String";
                break;
            case "NUMBER":
                texto = "Int";
                break;
            case "LONG":
                texto = "Double";
                break;
            case "DATE":
                texto = "Timestamp";
            default:
                texto = firstUpper(tipo);
                break;
        }
        return texto;
    }

    public ArrayList<Campo> getListaCampos() {
        return listaCampos;
    }

    public void setListaCampos(ArrayList<Campo> listaCampos) {
        this.listaCampos = listaCampos;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JClases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JClases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JClases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JClases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new JClases().setVisible(true);
                } catch (ExceptionConnection ex) {
                    Logger.getLogger(JClases.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public synchronized static String SQLTablas(String tabla) {
        String sql = "select table_name from DBA_TABLES where table_name='" + tabla + "'";
        return sql;
    }//

    public synchronized static String SQLColumnas() {
        String sql = "select column_name, data_type,data_length , nullable from all_tab_columns where table_name = ? order by column_id";
        return sql;
    }//

    public synchronized static String SQLPk() {
        String sql = "select uc.table_name, ucc.column_name,tc.data_type from user_cons_columns ucc join user_constraints uc  on ucc.constraint_name=uc.constraint_name join all_tab_columns tc on tc.column_name = ucc.column_name where uc.constraint_type='P' and  uc.TABLE_NAME=?";
        return sql;
    }//

    public Conexion getConexionActiva() {
        return conexionActiva;
    }

    public void setConexionActiva(Conexion conexionActiva) {
        this.conexionActiva = conexionActiva;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnBuscar;
    private javax.swing.JButton btnFileChoose;
    private javax.swing.JToggleButton btnGenerar;
    private javax.swing.JButton btnNuevoCampo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox cboRelacion;
    private javax.swing.JComboBox cboTipoAtributo;
    private javax.swing.JComboBox cboTipoComponente;
    private javax.swing.JCheckBox chkBean;
    private javax.swing.JCheckBox chkDomain;
    private javax.swing.JCheckBox chkEditForm;
    private javax.swing.JCheckBox chkListForm;
    private javax.swing.JCheckBox chkLovBean;
    private javax.swing.JCheckBox chkRepository;
    private javax.swing.JCheckBox chkScripts;
    private javax.swing.JCheckBox chkService;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JList jlListaConexiones;
    private javax.swing.JRadioButton rbAser;
    private javax.swing.JRadioButton rbCrud;
    private javax.swing.JPasswordField txtContraseña;
    private javax.swing.JTextField txtEntidad;
    private javax.swing.JTextField txtNomConexion;
    private javax.swing.JTextField txtPaquete;
    private javax.swing.JTextField txtRuta;
    private javax.swing.JTextField txtTabla;
    private javax.swing.JTextField txtTitulo;
    private javax.swing.JTextField txtURLConexion;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
